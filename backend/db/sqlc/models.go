// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ItemStatus string

const (
	ItemStatusClaimed  ItemStatus = "claimed"
	ItemStatusUnclamed ItemStatus = "unclamed"
)

func (e *ItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStatus(s)
	case string:
		*e = ItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStatus: %T", src)
	}
	return nil
}

type NullItemStatus struct {
	ItemStatus ItemStatus `json:"item_status"`
	Valid      bool       `json:"valid"` // Valid is true if ItemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStatus), nil
}

type PostTypeStatus string

const (
	PostTypeStatusLost  PostTypeStatus = "lost"
	PostTypeStatusFound PostTypeStatus = "found"
)

func (e *PostTypeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostTypeStatus(s)
	case string:
		*e = PostTypeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostTypeStatus: %T", src)
	}
	return nil
}

type NullPostTypeStatus struct {
	PostTypeStatus PostTypeStatus `json:"post_type_status"`
	Valid          bool           `json:"valid"` // Valid is true if PostTypeStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostTypeStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostTypeStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostTypeStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostTypeStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostTypeStatus), nil
}

type Category struct {
	ID          int32          `json:"id"`
	Title       sql.NullString `json:"title"`
	Discription sql.NullString `json:"discription"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

type LostItem struct {
	ID          int32              `json:"id"`
	CategoryID  sql.NullInt32      `json:"category_id"`
	FounderID   int32              `json:"founder_id"`
	Title       string             `json:"title"`
	Discription string             `json:"discription"`
	Date        sql.NullTime       `json:"date"`
	Time        sql.NullString     `json:"time"`
	Location    string             `json:"location"`
	PostType    NullPostTypeStatus `json:"post_type"`
	Status      NullItemStatus     `json:"status"`
	Remark      sql.NullString     `json:"remark"`
	CreatedAt   sql.NullTime       `json:"created_at"`
}

type LostItemsImage struct {
	ID            int32          `json:"id"`
	LostItemID    sql.NullInt32  `json:"lost_item_id"`
	LostItemImage sql.NullString `json:"lost_item_image"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

type User struct {
	ID        int32          `json:"id"`
	FullName  string         `json:"full_name"`
	Address   sql.NullString `json:"address"`
	Contact   string         `json:"contact"`
	Username  sql.NullString `json:"username"`
	UserImage sql.NullString `json:"user_image"`
	Password  sql.NullString `json:"password"`
	CreatedAt sql.NullTime   `json:"created_at"`
}
