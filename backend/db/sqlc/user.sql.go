// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    full_name,
    address,
    contact,
    username,
    user_image,
    password
) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, full_name, address, contact, username, user_image, password, created_at
`

type CreateUserParams struct {
	FullName  string         `json:"full_name"`
	Address   sql.NullString `json:"address"`
	Contact   string         `json:"contact"`
	Username  sql.NullString `json:"username"`
	UserImage sql.NullString `json:"user_image"`
	Password  sql.NullString `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Address,
		arg.Contact,
		arg.Username,
		arg.UserImage,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Address,
		&i.Contact,
		&i.Username,
		&i.UserImage,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, address, contact, username, user_image, password, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Address,
		&i.Contact,
		&i.Username,
		&i.UserImage,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
