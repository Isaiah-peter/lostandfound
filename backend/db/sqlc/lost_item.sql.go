// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: lost_item.sql

package db

import (
	"context"
	"database/sql"
)

const createLostItem = `-- name: CreateLostItem :one
INSERT INTO lost_items (
    category_id,
    founder_id,
    title,
    discription,
    date,
    time,
    location,
    post_type,
    status,
    remark
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, category_id, founder_id, title, discription, date, time, location, post_type, status, remark, created_at
`

type CreateLostItemParams struct {
	CategoryID  sql.NullInt32      `json:"category_id"`
	FounderID   int32              `json:"founder_id"`
	Title       string             `json:"title"`
	Discription string             `json:"discription"`
	Date        sql.NullTime       `json:"date"`
	Time        sql.NullString     `json:"time"`
	Location    string             `json:"location"`
	PostType    NullPostTypeStatus `json:"post_type"`
	Status      NullItemStatus     `json:"status"`
	Remark      sql.NullString     `json:"remark"`
}

func (q *Queries) CreateLostItem(ctx context.Context, arg CreateLostItemParams) (LostItem, error) {
	row := q.db.QueryRowContext(ctx, createLostItem,
		arg.CategoryID,
		arg.FounderID,
		arg.Title,
		arg.Discription,
		arg.Date,
		arg.Time,
		arg.Location,
		arg.PostType,
		arg.Status,
		arg.Remark,
	)
	var i LostItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.FounderID,
		&i.Title,
		&i.Discription,
		&i.Date,
		&i.Time,
		&i.Location,
		&i.PostType,
		&i.Status,
		&i.Remark,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLostItem = `-- name: DeleteLostItem :exec
DELETE FROM lost_items
WHERE id = $1
`

func (q *Queries) DeleteLostItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLostItem, id)
	return err
}

const getLostItem = `-- name: GetLostItem :one
SELECT id, category_id, founder_id, title, discription, date, time, location, post_type, status, remark, created_at FROM lost_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLostItem(ctx context.Context, id int32) (LostItem, error) {
	row := q.db.QueryRowContext(ctx, getLostItem, id)
	var i LostItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.FounderID,
		&i.Title,
		&i.Discription,
		&i.Date,
		&i.Time,
		&i.Location,
		&i.PostType,
		&i.Status,
		&i.Remark,
		&i.CreatedAt,
	)
	return i, err
}

const listLostItem = `-- name: ListLostItem :many
SELECT id, category_id, founder_id, title, discription, date, time, location, post_type, status, remark, created_at FROM lost_items
LIMIT $1
OFFSET $2
`

type ListLostItemParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLostItem(ctx context.Context, arg ListLostItemParams) ([]LostItem, error) {
	rows, err := q.db.QueryContext(ctx, listLostItem, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LostItem
	for rows.Next() {
		var i LostItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.FounderID,
			&i.Title,
			&i.Discription,
			&i.Date,
			&i.Time,
			&i.Location,
			&i.PostType,
			&i.Status,
			&i.Remark,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLostItemStatus = `-- name: UpdateLostItemStatus :exec
UPDATE lost_items
SET status = $2
WHERE id = $1
`

type UpdateLostItemStatusParams struct {
	ID     int32          `json:"id"`
	Status NullItemStatus `json:"status"`
}

func (q *Queries) UpdateLostItemStatus(ctx context.Context, arg UpdateLostItemStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateLostItemStatus, arg.ID, arg.Status)
	return err
}
